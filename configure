#!/bin/bash


no_cmake() {
    echo "Cannot find CMake, required for build of userspace components"
    exit 255
}


generate_flavours() {
    echo "Generating IPCP flavours ..."

    # Read the file line by line
    while read -r line || [[ -n "$line" ]]; do
        # Parse the line to get space separated items
        read -ra ITEMS <<< "$line"

        if [[ ${line:0:1} == "#" ]]; then
            # Skip comments
            continue
        fi

        FLAVOUR="${ITEMS[0]}"
        CCMACROS="-DIPCPFLAVOUR=-${FLAVOUR} "

        # Check that flavour name is ok
        if ! [[ $FLAVOUR =~ ^[a-z]+$ ]]; then
            echo "Invalid flavour name <$FLAVOUR>"
            exit 255
        fi

        # Scan the items
        for asstr in "${ITEMS[@]}"; do
            # For each item, try to parse it in the form "field=size"
            IFS='=' read -ra ASSIGN <<< "$asstr"
            if [ ${#ASSIGN[@]} == "2" ]; then
                # It is in the form "field=size"
                FIELD=${ASSIGN[0]}
                SIZE=${ASSIGN[1]}

                # make sure size makes sense
                case $SIZE in
                    "1"|"2"|"4"|"8")
                        # ok
                        BITSIZE=$((SIZE * 8))
                        ;;
                    *)
                        echo "Invalid field size <$SIZE>"
                        exit 255
                        ;;
                esac
                case ${FIELD} in
                    "addr"|"seq"|"pdulen"|"cepid"|"qosid")
                        CCMACROS=$CCMACROS"-Drl_${FIELD}_t=uint${BITSIZE}_t "
                        ;;
                    *)
                        echo "Unknown EFCP field <$FIELD>"
                        exit 255
                        ;;
                esac
            fi
        done

        # Generate the makefile chunk
        echo "" >> kernel/Makefile
        echo "obj-m += rlite-normal-${FLAVOUR}.o" >> kernel/Makefile
        echo "rlite-normal-${FLAVOUR}-y := normal-${FLAVOUR}.o" >> kernel/Makefile
        #echo "ccflags-rlite-normal-${FLAVOUR}-y += $CCMACROS" >> kernel/Makefile
        echo "CFLAGS_normal-${FLAVOUR}.o = $CCMACROS" >> kernel/Makefile

        # Generate a symbolic link towards normal.o
        (cd kernel && ln -sf normal.c normal-${FLAVOUR}.c)

    done < "flavours.conf"
    echo "... flavours generated"
}


HAVE_VMPI="n"
HAVE_SHIM_TCP4="y"
HAVE_SHIM_UDP4="y"
WITH_SKBUFFS="n"
INSTALL_PREFIX="/"
LIBMODPREFIX=""

# Option parsing
while [[ $# > 0 ]]
do
    key="$1"
    case $key in
        "--prefix")
        if [ -n "$2" ]; then
            INSTALL_PREFIX=$2
            shift
        else
            echo "--prefix requires a path argument"
            exit 255
        fi
        ;;

        "--libmodprefix")
        if [ -n "$2" ]; then
            LIBMODPREFIX=$2
            shift
        else
            echo "--libmodprefix requires a path argument"
            exit 255
        fi
        ;;

        "--with-shim-udp4")
        HAVE_SHIM_UDP4="y"
        ;;

        "--without-shim-udp4")
        HAVE_SHIM_UDP4="n"
        ;;

        "--with-shim-tcp4")
        HAVE_SHIM_TCP4="y"
        ;;

        "--without-shim-tcp4")
        HAVE_SHIM_TCP4="n"
        ;;

        "--with-skbuffs")
        WITH_SKBUFFS="y"
        ;;

        "--with-skbuffs")
        WITH_SKBUFFS="n"
        ;;

        "--with-vmpi")
        HAVE_VMPI="y"
        ;;

        "--without-vmpi")
        HAVE_VMPI="n"
        ;;

        *)
        echo "Unknown option '$key'"
        exit 255
        ;;
    esac
    shift
done

# Check if kernel headers are there for out-of-tree build
if [ ! -d /lib/modules/`uname -r`/build ]; then
    echo "Cannot find '/lib/modules/$(uname -r)/build' directory"
    echo "Make sure headers for the running kernel are installed"
    exit 255
fi

# Make sure CMake is installed
which cmake || no_cmake

# Generate symbolic links for common code
(
cd kernel
ln -sf ../common/ker-numtables.c ker-numtables.c
ln -sf ../common/utils.c utils.c
)

(
cd user/libs
ln -sf ../../common/ker-numtables.c ker-numtables.c
ln -sf ../../common/utils.c utils.c
)

# Configure CMake for out-of-tree build
rm -rf build &> /dev/null
mkdir build || exit 255

(
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=Debug
)

# Generate the main Makefile
cp Makefile.in Makefile
sed -i "s|@INSTALL_MOD_PATH@|${INSTALL_PREFIX}${LIBMODPREFIX}|g" Makefile
sed -i "s|@ROOTDIR@|$PWD|g" Makefile
sed -i "s|@LIBMODPREFIX@|${LIBMODPREFIX}|g" Makefile
sed -i "s|@HAVE_SHIM_UDP4@|${HAVE_SHIM_UDP4}|g" Makefile
sed -i "s|@HAVE_SHIM_TCP4@|${HAVE_SHIM_TCP4}|g" Makefile
sed -i "s|@HAVE_VMPI@|${HAVE_VMPI}|g" Makefile

# Prepare VMPI
if [ $HAVE_VMPI == "y" ]; then
    cd kernel/vmpi
    git clean -fdx .
    tar -zxvf vmpi-*.tar.gz
    rm vmpi/vmpi-bufs.c vmpi/vmpi-bufs.h
    mv vmpi/* .
    rm -rf vmpi
    # Delete the vmpi-bufs module line
    sed -i '/vmpi-bufs/d' Makefile
    # Insert a line to set include directives
    sed -i '1 i \
    EXTRA_CFLAGS := -I$(PWD)/../include' Makefile
    cd ../..
fi

# Generate kernel makefile
cp kernel/Makefile.in kernel/Makefile
generate_flavours

# Generate kerconfig.h file
KCF=kernel/kerconfig.h
cat > $KCF <<EOF
#ifndef __RLITE_KERCONFIG_H__
#define __RLITE_KERCONFIG_H__
EOF

if [ $WITH_SKBUFFS == "y" ]; then
    echo '#define RL_SKB' >> $KCF
fi

echo '#endif' >> $KCF

sed "s|HAVE_VMPI|${HAVE_VMPI}|g" in.prepare.sh > prepare.sh
sed "s|HAVE_VMPI|${HAVE_VMPI}|g" in.unprepare.sh > unprepare.sh
chmod +x prepare.sh
chmod +x unprepare.sh
