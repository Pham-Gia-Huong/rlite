#!/bin/bash


printmsg() {
    echo "$@" | tee -a config.log
}

no_cmake() {
    printmsg "Cannot find CMake, required for build of userspace components"
    exit 255
}


generate_flavours() {
    printmsg "Generating IPCP flavours ..."

    # Read the file line by line
    while read -r line || [[ -n "$line" ]]; do
        # Parse the line to get space separated items
        read -ra ITEMS <<< "$line"

        if [[ ${line:0:1} == "#" ]]; then
            # Skip comments
            continue
        fi

        FLAVOUR="${ITEMS[0]}"
        CCMACROS="-DIPCPFLAVOUR=-${FLAVOUR} "

        # Check that flavour name is ok
        if ! [[ $FLAVOUR =~ ^[a-z]+$ ]]; then
            printmsg "Invalid flavour name <$FLAVOUR>"
            exit 255
        fi

        # Scan the items
        for asstr in "${ITEMS[@]}"; do
            # For each item, try to parse it in the form "field=size"
            IFS='=' read -ra ASSIGN <<< "$asstr"
            if [ ${#ASSIGN[@]} == "2" ]; then
                # It is in the form "field=size"
                FIELD=${ASSIGN[0]}
                SIZE=${ASSIGN[1]}

                # make sure size makes sense
                case $SIZE in
                    "1"|"2"|"4"|"8")
                        # ok
                        BITSIZE=$((SIZE * 8))
                        ;;
                    *)
                        printmsg "Invalid field size <$SIZE>"
                        exit 255
                        ;;
                esac
                case ${FIELD} in
                    "addr"|"seq"|"pdulen"|"cepid"|"qosid")
                        CCMACROS=$CCMACROS"-Drl_${FIELD}_t=uint${BITSIZE}_t "
                        ;;
                    *)
                        printmsg "Unknown EFCP field <$FIELD>"
                        exit 255
                        ;;
                esac
            fi
        done

        # Generate the makefile chunk
        echo "" >> kernel/Makefile
        echo "obj-m += rlite-normal-${FLAVOUR}.o" >> kernel/Makefile
        echo "rlite-normal-${FLAVOUR}-y := normal-${FLAVOUR}.o" >> kernel/Makefile
        #echo "ccflags-rlite-normal-${FLAVOUR}-y += $CCMACROS" >> kernel/Makefile
        echo "CFLAGS_normal-${FLAVOUR}.o = $CCMACROS" >> kernel/Makefile

        # Generate a symbolic link towards normal.o
        (cd kernel && ln -sf normal.c normal-${FLAVOUR}.c)

    done < "flavours.conf"
    printmsg "... flavours generated"
}

KTESTDIR="kernel-test-dir"
KTESTOBJS=""

add_test() {
    {
        cat <<EOF
        #include <linux/module.h>
        #include <linux/kernel.h>
        #include <linux/init.h>
EOF
        cat  # output the test code read from stdin
    } > $KTESTDIR/$1.c
    {
        cat <<EOF
##############################################################################
#             TEST:  $1
##############################################################################
EOF
        cat $KTESTDIR/$1.c
    } >> config.log
    # Add a new kernel module to the running list
    KTESTOBJS="$1.o $KTESTOBJS"
}

probe_kernel_features() {
    # Clean-up leftovers.
    rm -rf $KTESTDIR
    mkdir $KTESTDIR

    cat >> config.log <<EOF
##############################################################################
#	      KERNEL PROBING TESTS
##############################################################################
EOF

    # Add tests one by one.
    add_test 'have_chrdev_rw_iter' <<EOF
        #include <linux/fs.h>
        void dummy(void) {
            struct file_operations *fops = NULL;
            (void)fops->write_iter;
            (void)fops->read_iter;
        }
EOF
    add_test 'signal_pending_in_sched_signal' <<EOF
        #include <linux/sched/signal.h>

        int dummy(void) {
            return signal_pending(NULL);
        }
EOF

    # Generate a Makefile for the tests.
    cat >> $KTESTDIR/Makefile <<EOF
ifneq (\$(KERNELRELEASE),)
# Each test is compiled as a separate kernel module.
obj-m := ${KTESTOBJS}
else
all:
	make -C ${KERNBUILDDIR} M=\$\$PWD
endif
EOF

    # Run tests.
    {
        cat <<EOF
##############################################################################
# BEGIN RUNNING TESTS: $(date)
##############################################################################
## Makefile:
EOF
        cat $KTESTDIR/Makefile
        cat <<EOF
##############################################################################
EOF
    } >> config.log
    (
        cd $KTESTDIR
        make -k -j $(grep -c processor /proc/cpuinfo)
    )  >> config.log 2>&1
    #eval "$TESTPOSTPROC"
    cat >> config.log <<EOF
##############################################################################
# END RUNNING TESTS: $(date)
##############################################################################
EOF
}

usage() {
    cat <<EOF
configure options:

    --help                      Show this help and exit
    --prefix                    [/] Prefix path for installation of kernel and user components
    --kernbuilddir              Path to the kernel directory to use for out-of-tree module compilation
    --with-shim-udp4            Enable shim-udp4
    --without-shim-udp4         Disable shim-udp4
    --with-shim-tcp4            Enable shim-tcp4
    --without-shim-tcp4         Disable shim-tcp4
    --with-skbuffs              Use Linux native skbuffs for PDU data/metadata (better performance)
    --without-skbuffs           Use custom packet representation for PDU data/metadata
    --verbose-kernel            Compile (conditional) verbose kernel logs (may slow down a bit)
    --debug                     Compile in debug mode
EOF
}


# Default parameter values

WITH_VMPI="n"
WITH_SHIM_TCP4="y"
WITH_SHIM_UDP4="y"
WITH_SKBUFFS="n"
VERB_KERN_LOGS="n"
INSTALL_PREFIX="/"
LIBMODPREFIX=""
KERNBUILDDIR="/lib/modules/`uname -r`/build"
DEBUG="n"

# Option parsing
while [[ $# > 0 ]]
do
    key="$1"
    case $key in
        "-h")
            usage
            exit 0
        ;;

        "--help")
            usage
            exit 0
        ;;

        "--prefix")
        if [ -n "$2" ]; then
            INSTALL_PREFIX=$2
            shift
        else
            echo "--prefix requires a path argument"
            exit 255
        fi
        ;;

        "--kernbuilddir")
        if [ -n "$2" ]; then
            KERNBUILDDIR=$2
            shift
        else
            echo "--kernbuilddir requires a path argument"
            exit 255
        fi
        ;;

        "--libmodprefix")
        if [ -n "$2" ]; then
            LIBMODPREFIX=$2
            shift
        else
            echo "--libmodprefix requires a path argument"
            exit 255
        fi
        ;;

        "--with-shim-udp4")
        WITH_SHIM_UDP4="y"
        ;;

        "--without-shim-udp4")
        WITH_SHIM_UDP4="n"
        ;;

        "--with-shim-tcp4")
        WITH_SHIM_TCP4="y"
        ;;

        "--without-shim-tcp4")
        WITH_SHIM_TCP4="n"
        ;;

        "--with-skbuffs")
        WITH_SKBUFFS="y"
        ;;

        "--without-skbuffs")
        WITH_SKBUFFS="n"
        ;;

        "--verbose-kernel")
        VERB_KERN_LOGS="y"
        ;;

        "--with-vmpi")
        WITH_VMPI="y"
        ;;

        "--without-vmpi")
        WITH_VMPI="n"
        ;;

        "--debug")
        DEBUG="y"
        ;;

        *)
        echo "Unknown option '$key'"
        echo "Try ./configure --help"
        exit 255
        ;;
    esac
    shift
done

# Check if kernel headers are there for out-of-tree build
if [ ! -d /lib/modules/`uname -r`/build ]; then
    printmsg "Cannot find '/lib/modules/$(uname -r)/build' directory"
    printmsg "Make sure headers for the running kernel are installed"
    exit 255
fi

# Make sure CMake is installed
which cmake || no_cmake

rm -f config.log

cat >> config.log <<EOF
##############################################################################
# CONFIGURING RLITE FOR BUILD on $(date)
##############################################################################
EOF

# Generate symbolic links for common code
(
cd kernel
ln -sf ../common/ker-numtables.c ker-numtables.c
ln -sf ../common/utils.c utils.c
)

(
cd user/libs
ln -sf ../../common/ker-numtables.c ker-numtables.c
ln -sf ../../common/utils.c utils.c
)

# Configure CMake for out-of-tree build
rm -rf build &> /dev/null
mkdir build || exit 255

(
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=Debug -DDEBUG=${DEBUG}
) | tee -a config.log

# Generate the main Makefile
cp Makefile.in Makefile
sed -i "s|@INSTALL_MOD_PATH@|${INSTALL_PREFIX}${LIBMODPREFIX}|g" Makefile
sed -i "s|@ROOTDIR@|$PWD|g" Makefile
sed -i "s|@KERNBUILDDIR@|$KERNBUILDDIR|g" Makefile
sed -i "s|@WITH_SHIM_UDP4@|${WITH_SHIM_UDP4}|g" Makefile
sed -i "s|@WITH_SHIM_TCP4@|${WITH_SHIM_TCP4}|g" Makefile
sed -i "s|@WITH_VMPI@|${WITH_VMPI}|g" Makefile

# Prepare VMPI
if [ $WITH_VMPI == "y" ]; then
    cd kernel/vmpi
    git clean -fdx .
    tar -zxvf vmpi-*.tar.gz
    rm vmpi/vmpi-bufs.c vmpi/vmpi-bufs.h
    mv vmpi/* .
    rm -rf vmpi
    # Delete the vmpi-bufs module line
    sed -i '/vmpi-bufs/d' Makefile
    # Insert a line to set include directives
    sed -i '1 i \
    EXTRA_CFLAGS := -I$(PWD)/../include' Makefile
    cd ../..
fi

# Generate kernel makefile
cp kernel/Makefile.in kernel/Makefile
generate_flavours

probe_kernel_features

# Generate kerconfig.h file
KCF=kernel/kerconfig.h
cat > $KCF <<EOF
#ifndef __RLITE_KERCONFIG_H__
#define __RLITE_KERCONFIG_H__
EOF

if [ $WITH_SKBUFFS == "y" ]; then
    echo '#define RL_SKB /* Use native Linux sk_buff */' >> $KCF
fi

if [ $VERB_KERN_LOGS == "y" ]; then
    echo '#define RL_PV_ENABLE /* Compile PV() conditional logs */' >> $KCF
fi

if [ $DEBUG == "y" ]; then
    echo '#define RL_MEMTRACK /* Track memory alloc/dealloc */' >> $KCF
fi

echo '#endif' >> $KCF

sed "s|WITH_VMPI|${WITH_VMPI}|g" in.prepare.sh > prepare.sh
sed "s|WITH_VMPI|${WITH_VMPI}|g" in.unprepare.sh > unprepare.sh
chmod +x prepare.sh
chmod +x unprepare.sh
